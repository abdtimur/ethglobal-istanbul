/* tslint:disable */
/* eslint-disable */
export function prover(a: number, b: number): number;
export function __wbg_wbg_rayon_poolbuilder_free(a: number): void;
export function wbg_rayon_poolbuilder_numThreads(a: number): number;
export function wbg_rayon_poolbuilder_receiver(a: number): number;
export function wbg_rayon_poolbuilder_build(a: number): void;
export function initThreadPool(a: number): number;
export function wbg_rayon_start_worker(a: number): void;
export function ring_core_0_17_5_bn_mul_mont(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function OPENSSL_memcpy(a: number, b: number, c: number): number;
export function OPENSSL_memset(a: number, b: number, c: number): number;
export function p256_point_mul(a: number, b: number, c: number, d: number): void;
export function p256_point_mul_base(a: number, b: number): void;
export function p256_mul_mont(a: number, b: number, c: number): void;
export function p256_sqr_mont(a: number, b: number): void;
export function p256_point_add(a: number, b: number, c: number): void;
export function p256_point_double(a: number, b: number): void;
export function p256_point_add_affine(a: number, b: number, c: number): void;
export function GFp_x25519_ge_frombytes_vartime(a: number, b: number): number;
export function GFp_x25519_ge_scalarmult_base(a: number, b: number): void;
export function GFp_x25519_sc_reduce(a: number): void;
export function GFp_x25519_scalar_mult_generic_masked(a: number, b: number, c: number): void;
export function GFp_x25519_public_from_private_generic_masked(a: number, b: number): void;
export function GFp_x25519_fe_invert(a: number, b: number): void;
export function GFp_x25519_fe_isnegative(a: number): number;
export function GFp_x25519_fe_mul_ttt(a: number, b: number, c: number): void;
export function GFp_x25519_fe_neg(a: number): void;
export function GFp_x25519_fe_tobytes(a: number, b: number): void;
export function GFp_x25519_ge_double_scalarmult_vartime(a: number, b: number, c: number, d: number): void;
export function GFp_x25519_sc_mask(a: number): void;
export function GFp_x25519_sc_muladd(a: number, b: number, c: number, d: number): void;
export function little_endian_bytes_from_scalar(a: number, b: number, c: number, d: number): void;
export function GFp_memcmp(a: number, b: number, c: number): number;
export function GFp_poly1305_init(a: number, b: number): void;
export function GFp_poly1305_update(a: number, b: number, c: number): void;
export function GFp_poly1305_finish(a: number, b: number): void;
export function GFp_bn_neg_inv_mod_r_u64(a: number): number;
export function LIMBS_are_zero(a: number, b: number): number;
export function LIMBS_equal(a: number, b: number, c: number): number;
export function LIMBS_equal_limb(a: number, b: number, c: number): number;
export function LIMBS_are_even(a: number, b: number): number;
export function LIMBS_less_than(a: number, b: number, c: number): number;
export function LIMBS_less_than_limb(a: number, b: number, c: number): number;
export function LIMBS_reduce_once(a: number, b: number, c: number): void;
export function LIMBS_add_mod(a: number, b: number, c: number, d: number, e: number): void;
export function LIMBS_sub_mod(a: number, b: number, c: number, d: number, e: number): void;
export function LIMBS_shl_mod(a: number, b: number, c: number, d: number): void;
export function LIMBS_select_512_32(a: number, b: number, c: number, d: number): number;
export function LIMBS_window5_split_window(a: number, b: number, c: number): number;
export function LIMBS_window5_unsplit_window(a: number, b: number): number;
export function LIMB_shr(a: number, b: number): number;
export function GFp_limbs_mul_add_limb(a: number, b: number, c: number, d: number): number;
export function limbs_mul_add_limb(a: number, b: number, c: number, d: number): number;
export function GFp_bn_from_montgomery_in_place(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function bn_mul_mont(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function bn_from_montgomery_in_place(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function p384_elem_sub(a: number, b: number, c: number): void;
export function p384_elem_div_by_2(a: number, b: number): void;
export function p384_elem_mul_mont(a: number, b: number, c: number): void;
export function p384_elem_neg(a: number, b: number): void;
export function p384_scalar_mul_mont(a: number, b: number, c: number): void;
export function nistz384_point_double(a: number, b: number): void;
export function nistz384_point_add(a: number, b: number, c: number): void;
export function nistz384_point_mul(a: number, b: number, c: number, d: number): void;
export function __assert_fail(a: number, b: number, c: number, d: number): void;
export function GFp_aes_nohw_set_encrypt_key(a: number, b: number, c: number): number;
export function GFp_aes_nohw_encrypt(a: number, b: number, c: number): void;
export function GFp_aes_nohw_ctr32_encrypt_blocks(a: number, b: number, c: number, d: number, e: number): void;
export function p256_scalar_mul_mont(a: number, b: number, c: number): void;
export function p256_scalar_sqr_rep_mont(a: number, b: number, c: number): void;
export const memory: WebAssembly.Memory;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_3: WebAssembly.Table;
export function wasm_bindgen__convert__closures__invoke1_mut__h8ab3936e5a0bb8ed(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke0_mut__h880c156ce630b49a(a: number, b: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h3c1ce6b083309d64(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1c7b8e82db0a438d(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h1a730699613c0055(a: number, b: number, c: number, d: number): void;
export function __wbindgen_thread_destroy(a: number, b: number): void;
export function __wbindgen_start(): void;
